Practical Git for Everyday Professional Use
https://egghead.io/courses/practical-git-for-everyday-professional-use?utm_source=drip&utm_medium=email&utm_campaign=learn-git-make-money

12 Agustos'a kadar bedava idi.

60 dk.

Practical Git for Everyday Professional Use
https://egghead.io/courses/practical-git-for-everyday-professional-use?utm_source=drip&utm_medium=email&utm_campaign=learn-git-make-money

12 Agustos'a kadar bedava idi.

60 dk.

-- Create local repos with git init --

// oldugun yerde repo baslat
git init

// .git klasorunu siler
rm -rf .git/

// dosyalari ekle
git add -A

// Sonra github -> profilin -> repositories -> new, yaratirken SSH kullan, HTTPS degil, yaratinca ssh'i kopyala
git remote add origin git@github.com:cemozturan/egghead-git-course.git
("origin" bizim remote'umuzun adi)

// calisti mi diye knotrol et, remotelara bak
git remote -v

-- Capture code history snapshots with git add/commit/push --

// reponun su anki durumunu ogren, mesela bir dosya degistirdin, burada cikar modified olarak, ama "not staged for commit" yazar
git status

// stage etmek icin
git add -A

// sonra commit et
git commit -m "commit mesaji buraya"

// status simdi master'in onunde oldugunu soyler
git status
Your branch is ahead of 'origin/master' by 1 commit.

// push'la ki esit olsunlar
git push

// simdi statusa bak
git status
Your branch is up-to-date with 'origin/master'.
nothing to commit, working directory clean

-- Sync local and remote repos with git pull -- 

// baska developerlar commitler yapti diyelim, sunlar var elimizde
git pull = git fetch && git merge
git fetch = degisikleri kendi repomuza alir ama dosyalari degistirmez, grab the changes, store them but don't include them in our local code yet
git merge = degisikleri uygular, merge in the changes we got from git fetch

-- Isolate feature development with git branch --

// Yeni branch yarat
git branch new-branch-name

// butun branchleri goster, yaninda asterisk (*) olan su anki checked out branch
git branch

// var olan bir brancha switch etmek icin
git checkout new-branch-name

// hem yeni branch yaratip hem ona switch etmek icin
git checkout -b new-feature

// su ankinden bir onceki brancha switch etmek icin, mesela masterdan new-feature'a gecmistin, bunu yazinca tekrar master'a donersin, bi daha yazarsan yeniden new-feature'a gecersin
git checkout -

-- Sync branches with git merge --

// yeni branchta degisikler yaptin diyelim, ve mastera merge etmek istiyorsun.
// once yeni brancha commit et o degisikleri (push yapma, sadece commit)
git commit -m "bi seyler bi seyler"
// sonra master'a switch et (degisikleri merge etmek istedigin brancha gec)
git checkout master
// sonra da hangi branchtan degisikleri alacaksan onu kullanarak git merge yap
git merge new-feature
// git kendisi ne tip bir merge yapacagini belirler, eger kolaysa, linear enough ise, fast-forward yapar, ama karisiksa 3-way merge yapar.
// simdi master'da degisikler, istersen git status ile kontrol et, master'i pushla
git push
// simdi de feature branchimizi silebiliriz artik
git branch -d new-feature

-- Resolve merge conflicts with git status --

