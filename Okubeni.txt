Practical Git for Everyday Professional Use
https://egghead.io/courses/practical-git-for-everyday-professional-use?utm_source=drip&utm_medium=email&utm_campaign=learn-git-make-money

12 Agustos'a kadar bedava idi.

60 dk.

Practical Git for Everyday Professional Use
https://egghead.io/courses/practical-git-for-everyday-professional-use?utm_source=drip&utm_medium=email&utm_campaign=learn-git-make-money

12 Agustos'a kadar bedava idi.

60 dk.

-- Create local repos with git init --

// oldugun yerde repo baslat
git init

// .git klasorunu siler
rm -rf .git/

// dosyalari ekle
git add -A

// Sonra github -> profilin -> repositories -> new, yaratirken SSH kullan, HTTPS degil, yaratinca ssh'i kopyala
git remote add origin git@github.com:cemozturan/egghead-git-course.git
("origin" bizim remote'umuzun adi)

// calisti mi diye knotrol et, remotelara bak
git remote -v

-- Capture code history snapshots with git add/commit/push --

// reponun su anki durumunu ogren, mesela bir dosya degistirdin, burada cikar modified olarak, ama "not staged for commit" yazar
git status

// stage etmek icin
git add -A

// sonra commit et
git commit -m "commit mesaji buraya"

// status simdi master'in onunde oldugunu soyler
git status
Your branch is ahead of 'origin/master' by 1 commit.

// push'la ki esit olsunlar
git push

// simdi statusa bak
git status
Your branch is up-to-date with 'origin/master'.
nothing to commit, working directory clean

-- Sync local and remote repos with git pull -- 

// baska developerlar commitler yapti diyelim, sunlar var elimizde
git pull = git fetch && git merge
git fetch = degisikleri kendi repomuza alir ama dosyalari degistirmez, grab the changes, store them but don't include them in our local code yet
git merge = degisikleri uygular, merge in the changes we got from git fetch

-- Isolate feature development with git branch --

// Yeni branch yarat
git branch new-branch-name

// butun branchleri goster, yaninda asterisk (*) olan su anki checked out branch
git branch

// var olan bir brancha switch etmek icin
git checkout new-branch-name

// hem yeni branch yaratip hem ona switch etmek icin
git checkout -b new-feature

// su ankinden bir onceki brancha switch etmek icin, mesela masterdan new-feature'a gecmistin, bunu yazinca tekrar master'a donersin, bi daha yazarsan yeniden new-feature'a gecersin
git checkout -

-- Sync branches with git merge --

// yeni branchta degisikler yaptin diyelim, ve mastera merge etmek istiyorsun.
// once yeni brancha commit et o degisikleri (push yapma, sadece commit)
git commit -m "bi seyler bi seyler"
// sonra master'a switch et (degisikleri merge etmek istedigin brancha gec)
git checkout master
// sonra da hangi branchtan degisikleri alacaksan onu kullanarak git merge yap
git merge new-feature
// git kendisi ne tip bir merge yapacagini belirler, eger kolaysa, linear enough ise, fast-forward yapar, ama karisiksa 3-way merge yapar.
// simdi master'da degisikler, istersen git status ile kontrol et, master'i pushla
git push
// simdi de feature branchimizi silebiliriz artik
git branch -d new-feature

-- Resolve merge conflicts with git status --

// simdi mesela push yapmaya calistin, ama dedi ki 
// Updates were rejected because the remote contains work that you do 
// hint: not have locally. This is usually caused by another repository pushing
// hint: to the same ref. You may want to first integrate the remote changes
// hint: (e.g., 'git pull ...') before pushing again.
// pull yapar degisikleri aliriz push etmeden once
git pull
// degisiklikleri alalim dedik ama bu sefer de conflict oldu
// CONFLICT (content): Merge conflict in someFile.txt
// Automatic merge failed; fix conflicts and then commit the result.

// git status burada ise yarar, "unmerged paths" altinda merge edilmemis her seyi listeler, bunlar conflictli olanlar
git status

// simdi conflict olan dosyayi herhangi bir text editorle acarsak soyle seyler goruruz:
<<<<<<< HEAD
Old words are here. 2.   (simdi su HEAD ile === arasi bizim degisiklikler)
=======
Some old words.
			 (=== ile >>> arasi remote'tan gelenler)
1.
>>>>>>> 9bc3000904553785e10c9312be414098379e2151
// ister kendimizinkini, ister remote'unkini, ister ikisinin karisimini kullanarak dosyayi duzeltiriz, save ederiz
// sonra da normal add-commit-push ederiz
git add -A
git commit -m "some stuff and resolved conflict"
git push

-- Save uncommitted changes with git stash --

// Simdi mesela yeni bir feature icin yeni bir branch yarattik
git checkout -b new-feature

// yeni bir dosya ekledik, file6.txt mesela, bi seyler yazili icinde filan, ama birden dediler ki onemli bir bug var hemen bakilmasi gereken
// eger direkt o bug icin bir branch yaratirsak bizim yeni dosya da o branchta olacak, ama biz bunu istemiyoruz. Bug branch yaratmadan once stage edip sonra stashleriz:
git add -A
git stash
// Saved working directory and index state WIP on new-feature: 9045881 edit
// HEAD is now at 9045881 edit

// Bunun yaptigi sey, butun uncommitted degisikleri stashlemek, ve working copy'yi last commite dondurmek.

// simdi bug icin branch yaratalim
git checkout -b hot-fix

// gereken degisikliklerden sonra once commit, sonra mastera merge, sonra pushlayalim
git add -A
git commit -m "hot fix"
git checkout master
git merge hot-fix
git push

// hot-fix branchini sil
git branch -d hot-fix

// new feature'a geri don
git checkout new-feature

// stashi uygula
git stash apply

// eger apply edilen stash ve su anki working copy ayni kodda degisiklik yapmaya calisiyorsa, ayni merge'de oldugu gibi conflict olur, ve ayni sekilde cozulur.

-- Navigate git command pager output with unix less commands --

// onceki commitleri gormek icin
git log

// bu farkli bir pager view'a alir bizi.
// "q" ile cikarsin.
// down-up arrows, pageup-pagedown, j-k, ctrl+f/b ile asagi yukari gidilir
// forward slash ile arama yapilir loglarda, /word yazip entera bas, word'lu yerler highlight olur. n ve N ile next/previous result bulunur.

// git log bir takim argumanlarla bilgileri ne sekilde gosterecegini ayarlayabilir
git log {arguments}

